# -*- coding: utf-8 -*-
"""Churn analysis in a telecommunications system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sYdrUbi2iKn22AhBn0X4jqJdw8PwAUn6
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/UFSC/5P/Data Science/telecom_churn.csv')
df.head()

df.shape

df.columns

df.info()

df['Churn'] = df ['Churn'].astype("int64")
df.info()

df['Churn'].value_counts(normalize=True)

df['Churn'].value_counts()[1]/df.shape[0]

df['Churn'].value_counts()

"""## Ordenação"""

df.columns

df.sort_values(by='Total day charge', ascending=True).head()

df.sort_values(by=['Churn', 'Total day charge'], ascending=[True, False]).head()

"""#### Average total day charge for departing customers"""

df[df['Churn'] == 0]['Total day charge'].mean()

"""

```
# Isto está formatado como código
```


#### Average total day charge for customers who stay

"""

df[df['Churn'] == 1]['Total day charge'].mean()

"""#### Maximum length of international calls (Total inti minutes) for users who stay (churn == 0) and for those who leave (churn == 1) who are not on an international calling plan (international plan)"""

df[(df['Churn'] == 0) & (df['International plan'] == 'No')]['Total intl minutes'].max()

df[(df['Churn'] == 1) & (df['International plan'] == 'No')]['Total intl minutes'].max()

"""#### Averages, standard deviations, maximums and minimums of “Total day minutes” and “Total night minutes” for users who stay and leave"""

import numpy as np

df.groupby(['Churn'])[['Total day minutes', 'Total night minutes']].agg([np.mean, np.std, np.min, np.max, np.sum])

"""#### Type of customer with the highest sums and averages of the sum of all calls"""

df.columns

df['Total Minutes Call'] = df['Total day minutes'] + df['Total night minutes'] + df['Total intl minutes'] + df['Total eve minutes']

df.groupby(['Churn'])[['Total Minutes Call']].agg([np.mean, np.sum])

import numpy as np

idade = [14, 14, 12, 12, 12, 12, 15, 13, 12, 13, 12]

print(np.mean(idade))

num = [1, 1, 3, 4.28, 5.69, 6, 8, 9]

print(np.median(num))